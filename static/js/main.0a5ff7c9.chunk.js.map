{"version":3,"sources":["utils/weather.js","components/TodayWeather.jsx","components/ForecastHour.jsx","components/ForecastCard.jsx","components/Forecast.jsx","components/Footer.jsx","App.js","utils/geolocation.js","serviceWorker.js","index.js"],"names":["getCurrentWeather","lat","lng","units","endpoint","fetch","mode","then","res","json","getForecast","TodayWeather","data","className","Card","Body","Title","name","Subtitle","main","temp","Img","src","weather","icon","alt","style","width","Text","feels_like","humidity","ForecastHour","hour","feels","ForecastCard","props","useState","state","avg","day","month","year","setState","useEffect","total","forEach","Math","round","slice","getAverage","Accordion","Header","Toggle","as","Button","variant","eventKey","Collapse","map","idx","key","Spinner","animation","Forecast","days","setDays","splitIntoDays","arr","num","newArr","length","push","splice","forecast","list","allDays","a","item","dt_txt","getDays","Footer","href","target","rel","App","weatherData","reRender","handleUpdate","unit","handleUnits","console","log","Promise","resolve","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a5ff7c9.chunk.js","sourcesContent":["export function getCurrentWeather(lat, lng, units) {\n    let endpoint = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&units=${units}&appid=c6c1dac29b1335ad681f4e3abcc959e0`;\n    return fetch(endpoint, { mode: \"cors\" }).then(res => res.json());\n}\n\nexport function getForecast(lat, lng, units) {\n    let endpoint = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lng}&units=${units}&appid=c6c1dac29b1335ad681f4e3abcc959e0`;\n    return fetch(endpoint, { mode: \"cors\" }).then(res => res.json());\n}\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\nfunction TodayWeather({ data, units }) {\n    return (\n        <div className=\"today__container\">\n            <Card className=\"text-center today__card\">\n                <Card.Body>\n                    <Card.Title className=\"today__card--title\">\n                        Weather for {data.name}\n                    </Card.Title>\n                    <Card.Subtitle className=\"d-inline mr-3 font-weight-bold today__card--subtitle\">\n                        {data.main.temp}&deg;{units}\n                    </Card.Subtitle>\n                    <Card.Img\n                        src={`https://openweathermap.org/img/w/${data.weather[0].icon}.png`}\n                        alt=\"Current Conditions\"\n                        style={{ width: \"4rem\" }}\n                        className=\"d-inline\"\n                    />\n                    <Card.Text className=\"text-muted\">\n                        Feels like: {data.main.feels_like}\n                    </Card.Text>\n                    <Card.Text className=\"text-muted\">\n                        Humidity: {data.main.humidity}%\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default TodayWeather;\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\nfunction ForecastHour({ data, units }) {\n    return (\n        <div className=\"hour__container col-sm-5 mt-2 mb-1\">\n            <Card className=\"hour__card text-center\">\n                <Card.Body className=\"hour__card--body \">\n                    <Card.Title className=\"hour__card--title\">\n                        {data.hour}\n                    </Card.Title>\n                    <Card.Subtitle className=\"d-inline mr-1 font-weight-bold hour__card--subtitle\">\n                        {data.temp}&deg;{units}\n                    </Card.Subtitle>\n                    <Card.Img\n                        src={`https://openweathermap.org/img/w/${data.icon}.png`}\n                        alt=\"Current Conditions\"\n                        style={{ width: \"2rem\" }}\n                        className=\"d-inline mb-3\"\n                    />\n                    <Card.Text className=\"text-muted hour__card--text\">\n                        Feels like: {data.feels}\n                    </Card.Text>\n                    <Card.Text className=\"text-muted hour__card--text\">\n                        Humidity: {data.humidity}%\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default ForecastHour;\n","import React, { useState, useEffect } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport ForecastHour from \"./ForecastHour\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nfunction ForecastCard(props) {\n    const [state, setState] = useState({\n        state: {\n            avg: null,\n            day: null,\n            month: null,\n            year: null,\n            data: null\n        }\n    });\n\n    const getAverage = data => {\n        let total = 0;\n        data.forEach(hour => {\n            let temp = hour.temp;\n            total += temp;\n        });\n        let avg = Math.round((total / 8) * 10) / 10;\n        setState({\n            state: {\n                avg: avg,\n                day: data[1].day.slice(8, 10),\n                month: data[1].day.slice(5, 7),\n                year: data[1].day.slice(0, 4),\n                data: data\n            }\n        });\n    };\n\n    useEffect(() => {\n        let data = props.data;\n        getAverage(data);\n    }, [props.data]);\n\n    return state.state.data ? (\n        <div className=\"col-sm-2 forecast__card--container\">\n            <Accordion className=\"forecast__accordion\">\n                <Card className=\"forecast__card\">\n                    <Card.Header className=\"text-center\">\n                        <Card.Title className=\"forecast__accordion--title mb-3\">\n                            {state.state.month}/{state.state.day}/\n                            {state.state.year}\n                        </Card.Title>\n                        <Card.Subtitle className=\"text-muted forecast__accordion--subtitle mb-2\">\n                            Average: {state.state.avg}&deg;{props.units}\n                        </Card.Subtitle>\n                        <Accordion.Toggle\n                            as={Button}\n                            variant=\"link\"\n                            eventKey=\"0\"\n                            className=\"forecast__accordion--btn mt-2\"\n                        >\n                            Read More!\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body className=\"forecast__accordion--body d-flex justify-content-around flex-wrap\">\n                            {state.state.data.map((hour, idx) => {\n                                return (\n                                    <ForecastHour\n                                        key={idx}\n                                        data={hour}\n                                        units={props.units}\n                                    />\n                                );\n                            })}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </div>\n    ) : (\n        <h2 className=\"text-center mt-5\">\n            <Spinner animation=\"border\" variant=\"warning\" /> Loading...\n        </h2>\n    );\n}\n\nexport default ForecastCard;\n","import React, { useState, useEffect } from \"react\";\nimport ForecastCard from \"./ForecastCard\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nfunction Forecast(props) {\n    const [days, setDays] = useState(null);\n\n    const splitIntoDays = (arr, num) => {\n        let newArr = [];\n        while (arr.length) {\n            newArr.push(arr.splice(0, num));\n        }\n        setDays({\n            days: newArr\n        });\n    };\n\n    useEffect(() => {\n        let data = props.forecast.list;\n        let allDays = [];\n        const getDays = async () => {\n            await data.map(item => {\n                let hour = {};\n                hour.hour = item.dt_txt.slice(11, 16);\n                hour.temp = item.main.temp;\n                hour.feels = item.main.feels_like;\n                hour.humidity = item.main.humidity;\n                hour.day = item.dt_txt.slice(0, 10);\n                hour.icon = item.weather[0].icon;\n                return allDays.push(hour);\n            });\n            splitIntoDays(allDays, 8);\n        };\n        getDays();\n    }, [props.forecast.list]);\n\n    return days ? (\n        <div className=\"d-flex justify-content-around flex-wrap forecast__div\">\n            {days.days.map((day, idx) => {\n                return (\n                    <ForecastCard key={idx} data={day} units={props.units} />\n                );\n            })}\n        </div>\n    ) : (\n        <h2 className=\"text-center mt-5\">\n            <Spinner animation=\"border\" variant=\"warning\" /> Loading...\n        </h2>\n    );\n}\n\nexport default Forecast;\n","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p>\n                <a\n                    href=\"https://github.com/suzynakayama\"\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                >\n                    <span>Developed by</span>\n                    &nbsp;Suzy Yume&nbsp;\n                    <i className=\"devicon-github-plain git-icon\"></i>\n                </a>\n            </p>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { getLatLng } from \"./utils/geolocation\";\nimport { getCurrentWeather, getForecast } from \"./utils/weather\";\nimport TodayWeather from \"./components/TodayWeather\";\nimport Forecast from \"./components/Forecast\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nclass App extends Component {\n    state = {\n        lat: null,\n        lng: null,\n        weatherData: null,\n        forecast: null,\n        units: \"metric\",\n        reRender: false\n    };\n\n    async componentDidMount() {\n        const { lat, lng } = await getLatLng();\n        const weatherData = await getCurrentWeather(lat, lng, this.state.units);\n        const forecast = await getForecast(lat, lng, this.state.units);\n        this.setState({\n            ...this.state,\n            lat: lat,\n            lng: lng,\n            weatherData: weatherData,\n            forecast: forecast\n        });\n    }\n\n    handleUpdate = async unit => {\n        const weatherData = await getCurrentWeather(\n            this.state.lat,\n            this.state.lng,\n            unit\n        );\n        const forecast = await getForecast(\n            this.state.lat,\n            this.state.lng,\n            unit\n        );\n        this.setState({\n            ...this.state,\n            weatherData: weatherData,\n            forecast: forecast,\n            units: unit\n        });\n    };\n\n    handleUnits = async () => {\n        try {\n            if (this.state.units === \"metric\") {\n                await this.handleUpdate(\"imperial\");\n            } else {\n                await this.handleUpdate(\"metric\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    render() {\n        return this.state.weatherData && this.state.forecast ? (\n            <div>\n                <h1 className=\"text-center mt-5 mb-4 app-title\">\n                    React Weather\n                </h1>\n                <div className=\"btn-container\">\n                    <Button\n                        variant=\"warning\"\n                        className=\"units-btn font-weight-bold\"\n                        onClick={this.handleUnits}\n                    >\n                        {this.state.units === \"imperial\" ? \"C\" : \"F\"}\n                    </Button>\n                </div>\n                <TodayWeather\n                    data={this.state.weatherData}\n                    units={this.state.units === \"metric\" ? \"C\" : \"F\"}\n                />\n                <Forecast\n                    forecast={this.state.forecast}\n                    units={this.state.units === \"metric\" ? \"C\" : \"F\"}\n                />\n                <Footer />\n            </div>\n        ) : (\n            <h2 className=\"text-center mt-5\">\n                <Spinner animation=\"border\" variant=\"warning\" /> Loading...\n            </h2>\n        );\n    }\n}\n\nexport default App;\n","export function getLatLng() {\n    return new Promise(resolve => {\n        navigator.geolocation.getCurrentPosition(pos =>\n            resolve({\n                lat: pos.coords.latitude,\n                lng: pos.coords.longitude\n            })\n        );\n    });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}